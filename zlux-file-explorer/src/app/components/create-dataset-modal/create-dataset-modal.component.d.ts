import { ElementRef } from '@angular/core';
import { MatSelect } from '@angular/material/select';
export declare class CreateDatasetModal {
    private el;
    private properties;
    private numericPattern;
    private numericPatternExZero;
    private datasetNamePattern;
    private alphaNumericPattern;
    private templateOptions;
    private allocationUnitOptions;
    private datasetNameTypeOptions;
    private recordFormatOptions;
    private organizationOptions;
    private recordUnitOptions;
    private matcher;
    private isDirBlockValid;
    private dirBlockError;
    private dirBlockTouched;
    private isPrimeSpaceValid;
    private isSecondSpaceValid;
    private isRecLengthValid;
    private isBlockSizeValid;
    private primarySpaceError;
    private secondarySpaceError;
    private recordLengthError;
    private blockSizeError;
    private isRecordFormatValid;
    private recordFormatErrorMessage;
    private blockSizeTouched;
    private isAllocUnitValid;
    private allocUnitErrorMessage;
    private isRecFormatTouched;
    dirblocks: ElementRef;
    primeSpace: ElementRef;
    allocUnit: MatSelect;
    secondSpace: ElementRef;
    recordLength: ElementRef;
    recordFormat: MatSelect;
    dsorg: ElementRef;
    constructor(el: ElementRef, data: any);
    onTemplateChange(value: string): void;
    setDatasetNameTypeProperties(datasetNameType: string): void;
    setTemplateProperties(template: string): void;
    onDirBlockChange(value: any): void;
    checkForValidDirBlockCombination(): void;
    checkForValidRecordFormatCombination(): void;
    checkForValidAllocUnitCombination(): void;
    onPrimeSpaceChange(primarySpace: any): void;
    onSecondSpaceChange(SecondarySpace: any): void;
    onRecLengthChange(recordLength: any): void;
    onBlockSizeChange(blockSize: any): void;
    onRecordFormatChange(value: any): void;
    onAllocUnitChange(value: any): void;
}
