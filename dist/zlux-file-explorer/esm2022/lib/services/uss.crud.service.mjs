/*
  This program and the accompanying materials are
  made available under the terms of the Eclipse Public License v2.0 which accompanies
  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html
  
  SPDX-License-Identifier: EPL-2.0
  
  Copyright Contributors to the Zowe Project.
*/
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./utils.service";
export class UssCrudService {
    handleErrorObservable(error) {
        console.error(error.message || error);
        return throwError(error.message || error);
    }
    constructor(http, utils) {
        this.http = http;
        this.utils = utils;
    }
    makeDirectory(path, forceOverwrite) {
        let url = ZoweZLUX.uriBroker.unixFileUri('mkdir', path, undefined, undefined, undefined, forceOverwrite);
        return this.http.post(url, null).pipe(catchError(this.handleErrorObservable));
    }
    makeFile(path) {
        let url = ZoweZLUX.uriBroker.unixFileUri('touch', path);
        return this.http.post(url, null).pipe(catchError(this.handleErrorObservable));
    }
    getFileContents(path) {
        let filePath = this.utils.filePathCheck(path);
        let url = ZoweZLUX.uriBroker.unixFileUri('contents', filePath);
        return this.http.get(url).pipe(catchError(this.handleErrorObservable));
    }
    getFileMetadata(path) {
        let filePath = this.utils.filePathCheck(path);
        let url = ZoweZLUX.uriBroker.unixFileUri('metadata', filePath);
        //TODO: Fix ZSS bug where "%2F" is not properly processed as a "/" character
        url = url.split("%2F").join("/");
        return this.http.get(url).pipe(catchError(this.handleErrorObservable));
    }
    copyFile(oldPath, newPath, forceOverwrite) {
        let url = ZoweZLUX.uriBroker.unixFileUri('copy', oldPath, undefined, undefined, newPath, forceOverwrite, undefined, true);
        return this.http.post(url, null).pipe(catchError(this.handleErrorObservable));
    }
    deleteFileOrFolder(path) {
        let filePath = this.utils.filePathCheck(path);
        let url = ZoweZLUX.uriBroker.unixFileUri('contents', filePath);
        return this.http.delete(url).pipe(catchError(this.handleErrorObservable));
    }
    renameFile(oldPath, newPath, forceOverwrite) {
        let url = ZoweZLUX.uriBroker.unixFileUri('rename', oldPath, undefined, undefined, newPath, forceOverwrite);
        return this.http.post(url, null).pipe(catchError(this.handleErrorObservable));
    }
    saveFile(path, fileContents, targetEncoding, forceOverwrite) {
        let url = ZoweZLUX.uriBroker.unixFileUri('contents', path, "UTF-8", targetEncoding, undefined, forceOverwrite, undefined, true);
        return this.http.put(url, fileContents).pipe(catchError(this.handleErrorObservable));
    }
    getUserHomeFolder() {
        let url = ZoweZLUX.uriBroker.userInfoUri();
        return this.http.get(url).pipe(map((res) => res), catchError(this.handleErrorObservable));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: UssCrudService, deps: [{ token: i1.HttpClient }, { token: i2.UtilsService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: UssCrudService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: UssCrudService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.UtilsService }] });
//# sourceMappingURL=data:application/json;base64,