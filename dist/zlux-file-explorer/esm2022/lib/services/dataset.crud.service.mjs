/*
  This program and the accompanying materials are
  made available under the terms of the Eclipse Public License v2.0 which accompanies
  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html
  
  SPDX-License-Identifier: EPL-2.0
  
  Copyright Contributors to the Zowe Project.
*/
import { Injectable } from '@angular/core';
import { catchError, switchMap, map } from 'rxjs/operators';
import { of, throwError } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./utils.service";
export class DatasetCrudService {
    constructor(http, utils) {
        this.http = http;
        this.utils = utils;
    }
    handleErrorObservable(error) {
        console.error(error.message || error);
        return throwError(error.message || error);
    }
    //addfolder
    addfolder() {
    }
    //removefolder
    removefolder() {
    }
    //copyfolder
    copyfolder() {
    }
    //deletefolder
    deletefolder() {
    }
    //renamefolder
    renamefolder() {
    }
    //addfile
    addfile() {
    }
    //removefile
    removefile() {
    }
    //copyfile
    copyfile() {
    }
    //deletefile
    deletefile() {
    }
    //renamefile
    renamefile() {
    }
    deleteNonVsamDatasetOrMember(rightClickedFile) {
        let url = ZoweZLUX.uriBroker.datasetContentsUri(rightClickedFile.data.path);
        return this.http.delete(url).pipe(catchError(this.handleErrorObservable));
    }
    deleteVsamDataset(rightClickedFile) {
        let url = ZoweZLUX.uriBroker.VSAMdatasetContentsUri(rightClickedFile.data.path);
        return this.http.delete(url).pipe(catchError(this.handleErrorObservable));
    }
    queryDatasets(query, detail, includeAdditionalQualifiers) {
        let url;
        url = ZoweZLUX.uriBroker.datasetMetadataUri(encodeURIComponent(query.toUpperCase().replace(/\.$/, '')), detail.toString(), undefined, true, undefined, undefined, undefined, undefined, undefined, includeAdditionalQualifiers.toString());
        return this.http.get(url).pipe(catchError(this.handleErrorObservable));
    }
    getDataset(path) {
        let url = ZoweZLUX.uriBroker.datasetContentsUri(path.trim().toUpperCase());
        return this.http.get(url).pipe(catchError(this.handleErrorObservable));
    }
    recallDataset(path) {
        const datasetName = path.trim().toUpperCase();
        const contentsURI = ZoweZLUX.uriBroker.datasetContentsUri(datasetName);
        const detail = String(true);
        const types = undefined;
        const listMembers = true;
        const workAreaSize = undefined;
        const includeMigrated = true;
        const metadataURI = ZoweZLUX.uriBroker.datasetMetadataUri(datasetName, detail, types, listMembers, workAreaSize, includeMigrated);
        return this.http.get(contentsURI)
            .pipe(
        // dataset contents service may return an error, e.g. if dataset has RECFM=U
        // recall should happen inspite of the error
        catchError(_err => of('')), 
        // get metadata to ensure that the dataset has successfully recalled
        switchMap(() => this.http.get(metadataURI)), 
        // map(res => res.json()),
        map((data) => data.datasets[0]), switchMap(
        // ensure that dataset is recalled, otherwise throw an error
        datasetAttrs => this.utils.isDatasetMigrated(datasetAttrs) ?
            throwError(new Error('Unable to recall dataset')) : of(datasetAttrs)));
    }
    createDataset(datasetAttributes, name) {
        const contentsURI = ZoweZLUX.uriBroker.datasetContentsUri(name);
        return this.http.put(contentsURI, datasetAttributes)
            .pipe(catchError(error => throwError(error)), map((res) => res));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: DatasetCrudService, deps: [{ token: i1.HttpClient }, { token: i2.UtilsService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: DatasetCrudService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: DatasetCrudService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.HttpClient }, { type: i2.UtilsService }] });
//# sourceMappingURL=data:application/json;base64,