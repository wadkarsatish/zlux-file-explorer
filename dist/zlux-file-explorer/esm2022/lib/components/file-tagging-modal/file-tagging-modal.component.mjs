/*
  This program and the accompanying materials are
  made available under the terms of the Eclipse Public License v2.0 which accompanies
  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html

  SPDX-License-Identifier: EPL-2.0

  Copyright Contributors to the Zowe Project.
*/
import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { CustomErrorStateMatcher } from '../../shared/error-state-matcher';
import { fileTagList, findFileTagByCodeset } from '../../shared/file-tag';
import { defaultSnackbarOptions } from '../../shared/snackbar-options';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
import * as i2 from "@angular/common/http";
import * as i3 from "@angular/material/snack-bar";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/input";
import * as i7 from "@angular/material/list";
import * as i8 from "@angular/material/button";
import * as i9 from "@angular/material/core";
import * as i10 from "@angular/material/autocomplete";
import * as i11 from "zlux-widgets";
import * as i12 from "@angular/material/slide-toggle";
export class FileTaggingModal {
    constructor(data, dialogRef, http, snackBar) {
        this.dialogRef = dialogRef;
        this.http = http;
        this.snackBar = snackBar;
        this.matcher = new CustomErrorStateMatcher();
        this.recursive = false;
        this.tagOptions = fileTagList;
        this.node = data.node;
        this.name = this.node.name;
        this.isDirectory = this.node.directory;
        this.icon = this.node.icon ? this.node.icon : this.node.collapsedIcon;
        this.title = this.isDirectory ? 'Tag files' : 'Tag file';
        const codeset = this.isDirectory ? 0 : this.node.ccsid;
        this.selectedOption = findFileTagByCodeset(codeset);
        this.filteredOptions = this.tagOptions;
    }
    changeTag() {
        const path = this.node.path;
        const recursive = this.recursive;
        const option = this.selectedOption;
        const type = option.type;
        const codeset = (type === 'text') ? option.codeset : undefined;
        const options = {
            recursive,
            type,
            codeset
        };
        const url = ZoweZLUX.uriBroker.unixFileUri('chtag', path, options);
        const action = (type === 'delete') ? this.http.delete(url) : this.http.post(url, null);
        action.pipe(finalize(() => this.closeDialog())).
            subscribe(_res => this.onTaggingSuccess(path, type, option), err => this.onTaggingFailure(err));
    }
    closeDialog() {
        const needUpdate = this.isDirectory;
        this.dialogRef.close(needUpdate);
    }
    onTaggingSuccess(path, type, option) {
        if (!this.isDirectory) {
            this.node.ccsid = option.codeset;
        }
        const verb = (type === 'delete') ? 'untagged' : 'tagged';
        const asCodesetOrEmpty = (type === 'delete') ? '' : `as ${option.name}`;
        const message = this.isDirectory ?
            `Files in ${path} have been successfully ${verb} ${asCodesetOrEmpty}` :
            `File ${path} has been successfully ${verb} ${asCodesetOrEmpty}`;
        this.snackBar.open(message, 'Dismiss', defaultSnackbarOptions);
    }
    onTaggingFailure(err) {
        let message = 'Failed to change tag(s)';
        if (typeof err.error === 'object' && typeof err.error.error === 'string') {
            message = err.error.error;
        }
        this.snackBar.open(`Error: ${message}.`, 'Dismiss', defaultSnackbarOptions);
    }
    displayFn(option) {
        return option ? option.name : undefined;
    }
    onValueChange(value) {
        if (value) {
            const encoding = (typeof value === 'string') ? value : value.name;
            this.filteredOptions = this.filter(this.tagOptions, encoding);
        }
        else {
            this.filteredOptions = this.tagOptions;
        }
    }
    get isOptionSelected() {
        return typeof this.selectedOption === 'object';
    }
    filter(options, value) {
        const filterValue = value.toLowerCase();
        return options.filter(option => option.name.toLowerCase().includes(filterValue));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: FileTaggingModal, deps: [{ token: MAT_DIALOG_DATA }, { token: i1.MatDialogRef }, { token: i2.HttpClient }, { token: i3.MatSnackBar }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.7", type: FileTaggingModal, selector: "file-tagging-modal", ngImport: i0, template: "<!--\nThis program and the accompanying materials are\nmade available under the terms of the Eclipse Public License v2.0 which accompanies\nthis distribution, and is available at https://www.eclipse.org/legal/epl-v20.html\n\nSPDX-License-Identifier: EPL-2.0\n\nCopyright Contributors to the Zowe Project.\n-->\n<zlux-tab-trap></zlux-tab-trap>\n<div class=\"padding-1\">\n  <div class=\"d-flex\">\n    <div class=\"modal-icon-container\">\n      <i class=\"{{icon}} modal-icon\"></i>\n    </div>\n    <div>\n      <h2 mat-dialog-title class=\"modal-mat-header\">{{name}} - File Tagging</h2>\n    </div>\n    <div>\n      <button mat-dialog-close class=\"close-dialog-btn\"><i class=\"fa fa-close\"></i></button>\n    </div>\n  </div>\n  <div class=\"modal-row\">\n    <div class=\"modal-column-full-width\">\n      <mat-list-item>\n        @if (isDirectory) {\n        Tag all files as\n        } @else {\n        Tag file as\n        }\n        <ng-template #file>Tag file as</ng-template>\n        <mat-form-field appearance=\"fill\" style=\"margin-left: 36px;\">\n          <input matInput required type=\"text\" [(ngModel)]=\"selectedOption\" (ngModelChange)=\"onValueChange($event)\"\n            [matAutocomplete]=\"auto\" [errorStateMatcher]=\"matcher\" #encodingInput=\"ngModel\">\n          <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n            @for (option of filteredOptions; track option) {\n            <mat-option [value]=\"option\">\n              {{ option.name }}\n            </mat-option>\n            }\n          </mat-autocomplete>\n          @if (encodingInput.hasError('required')) {\n          <mat-error>\n            Encoding is required\n          </mat-error>\n          }\n        </mat-form-field>\n      </mat-list-item>\n    </div>\n  </div>\n\n  @if (isDirectory) {\n  <div class=\"modal-row\">\n    <div class=\"modal-column\" style=\"width: 40%;\">\n      <mat-list-item>\n        <mat-slide-toggle color=\"primary\" [(ngModel)]=\"recursive\"></mat-slide-toggle>\n      </mat-list-item>\n    </div>\n    <div class=\"modal-column\">\n      <mat-list-item>\n        <div class=\"selectable-text\">Process subdirectories</div>\n      </mat-list-item>\n    </div>\n  </div>\n  }\n\n  <mat-dialog-actions>\n    <button mat-button class=\"modal-mat-button\" (click)=\"changeTag()\" [disabled]=\"!isOptionSelected\">Save</button>\n  </mat-dialog-actions>\n</div>\n<!--\n  This program and the accompanying materials are\n  made available under the terms of the Eclipse Public License v2.0 which accompanies\n  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Copyright Contributors to the Zowe Project.\n  -->", styles: [".file-tagging-container{padding:1rem}\n", "mat-dialog-actions{justify-content:flex-end}.close-dialog-btn{float:right;border:none;background:transparent;outline:none;padding:1rem}.modal-column{float:left;width:50%}.modal-column-full-width{width:100%}.modal-row:after{content:\"\";display:table;clear:both}.modal-row{padding-top:15px;font-size:medium}.modal-title{vertical-align:middle;float:left}.selectable-text{-moz-user-select:text!important;-khtml-user-select:text!important;-webkit-user-select:text!important;-ms-user-select:text!important;user-select:text!important;min-width:200px}.modal-mat-button{border-radius:3px;border:solid;color:#3f51b5;border-width:1.75px;box-shadow:transparent;background-color:transparent;font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:500}.modal-mat-button.cancel{color:#242424;border-color:transparent;margin-right:5px}.modal-mat-button.cancel:hover{background-color:#e0e0e0;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-button:hover{background-color:#2c4cff1f;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-button-delete{padding:6px;width:85px;border-radius:3px;border:solid;color:#e64242;border-width:1.75px;box-shadow:transparent;background-color:transparent;margin-top:25px;margin-right:-10px;font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:500}.modal-mat-button-delete.cancel{border-color:transparent;color:#242424;margin-top:25px;margin-right:5px}.modal-mat-button-delete.cancel:hover{background-color:#e0e0e0;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-button-delete:hover{background-color:#fff0f0;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-header{margin-left:1rem;-webkit-user-select:text;user-select:text}.modal-icon{font-size:24px;position:absolute;margin-top:4px;margin-left:3px}.modal-content-body{margin-left:45px;margin-bottom:-5px;margin-top:1px;font-size:17px;min-width:400px}.modal-clear-button{border-radius:100%;background-color:transparent;border-color:transparent}.modal-clear-button:hover{background-color:#0000001f!important;transition:0!important;-webkit-transition-duration:0!important;transition-duration:0!important}.padding-1{padding:1rem}.d-flex{display:flex}.flex-align-items-start{align-items:flex-start}.modal-icon-container{display:flex;flex-direction:column;justify-content:center}.mat-mdc-button:not(:disabled){color:none}.mat-mdc-form-field-focus-overlay,.mdc-text-field--focused{background-color:#fff!important}\n"], dependencies: [{ kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i1.MatDialogClose, selector: "[mat-dialog-close], [matDialogClose]", inputs: ["aria-label", "type", "mat-dialog-close", "matDialogClose"], exportAs: ["matDialogClose"] }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i5.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i6.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i7.MatListItem, selector: "mat-list-item, a[mat-list-item], button[mat-list-item]", inputs: ["activated"], exportAs: ["matListItem"] }, { kind: "component", type: i8.MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }, { kind: "component", type: i9.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "component", type: i10.MatAutocomplete, selector: "mat-autocomplete", inputs: ["aria-label", "aria-labelledby", "displayWith", "autoActiveFirstOption", "autoSelectActiveOption", "requireSelection", "panelWidth", "disableRipple", "class", "hideSingleSelectionIndicator"], outputs: ["optionSelected", "opened", "closed", "optionActivated"], exportAs: ["matAutocomplete"] }, { kind: "directive", type: i10.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", inputs: ["matAutocomplete", "matAutocompletePosition", "matAutocompleteConnectedTo", "autocomplete", "matAutocompleteDisabled"], exportAs: ["matAutocompleteTrigger"] }, { kind: "component", type: i11.ZluxTabbingComponent, selector: "zlux-tab-trap", inputs: ["hiddenIds", "hiddenPos"] }, { kind: "component", type: i12.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.7", ngImport: i0, type: FileTaggingModal, decorators: [{
            type: Component,
            args: [{ selector: 'file-tagging-modal', template: "<!--\nThis program and the accompanying materials are\nmade available under the terms of the Eclipse Public License v2.0 which accompanies\nthis distribution, and is available at https://www.eclipse.org/legal/epl-v20.html\n\nSPDX-License-Identifier: EPL-2.0\n\nCopyright Contributors to the Zowe Project.\n-->\n<zlux-tab-trap></zlux-tab-trap>\n<div class=\"padding-1\">\n  <div class=\"d-flex\">\n    <div class=\"modal-icon-container\">\n      <i class=\"{{icon}} modal-icon\"></i>\n    </div>\n    <div>\n      <h2 mat-dialog-title class=\"modal-mat-header\">{{name}} - File Tagging</h2>\n    </div>\n    <div>\n      <button mat-dialog-close class=\"close-dialog-btn\"><i class=\"fa fa-close\"></i></button>\n    </div>\n  </div>\n  <div class=\"modal-row\">\n    <div class=\"modal-column-full-width\">\n      <mat-list-item>\n        @if (isDirectory) {\n        Tag all files as\n        } @else {\n        Tag file as\n        }\n        <ng-template #file>Tag file as</ng-template>\n        <mat-form-field appearance=\"fill\" style=\"margin-left: 36px;\">\n          <input matInput required type=\"text\" [(ngModel)]=\"selectedOption\" (ngModelChange)=\"onValueChange($event)\"\n            [matAutocomplete]=\"auto\" [errorStateMatcher]=\"matcher\" #encodingInput=\"ngModel\">\n          <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\" [displayWith]=\"displayFn\">\n            @for (option of filteredOptions; track option) {\n            <mat-option [value]=\"option\">\n              {{ option.name }}\n            </mat-option>\n            }\n          </mat-autocomplete>\n          @if (encodingInput.hasError('required')) {\n          <mat-error>\n            Encoding is required\n          </mat-error>\n          }\n        </mat-form-field>\n      </mat-list-item>\n    </div>\n  </div>\n\n  @if (isDirectory) {\n  <div class=\"modal-row\">\n    <div class=\"modal-column\" style=\"width: 40%;\">\n      <mat-list-item>\n        <mat-slide-toggle color=\"primary\" [(ngModel)]=\"recursive\"></mat-slide-toggle>\n      </mat-list-item>\n    </div>\n    <div class=\"modal-column\">\n      <mat-list-item>\n        <div class=\"selectable-text\">Process subdirectories</div>\n      </mat-list-item>\n    </div>\n  </div>\n  }\n\n  <mat-dialog-actions>\n    <button mat-button class=\"modal-mat-button\" (click)=\"changeTag()\" [disabled]=\"!isOptionSelected\">Save</button>\n  </mat-dialog-actions>\n</div>\n<!--\n  This program and the accompanying materials are\n  made available under the terms of the Eclipse Public License v2.0 which accompanies\n  this distribution, and is available at https://www.eclipse.org/legal/epl-v20.html\n\n  SPDX-License-Identifier: EPL-2.0\n\n  Copyright Contributors to the Zowe Project.\n  -->", styles: [".file-tagging-container{padding:1rem}\n", "mat-dialog-actions{justify-content:flex-end}.close-dialog-btn{float:right;border:none;background:transparent;outline:none;padding:1rem}.modal-column{float:left;width:50%}.modal-column-full-width{width:100%}.modal-row:after{content:\"\";display:table;clear:both}.modal-row{padding-top:15px;font-size:medium}.modal-title{vertical-align:middle;float:left}.selectable-text{-moz-user-select:text!important;-khtml-user-select:text!important;-webkit-user-select:text!important;-ms-user-select:text!important;user-select:text!important;min-width:200px}.modal-mat-button{border-radius:3px;border:solid;color:#3f51b5;border-width:1.75px;box-shadow:transparent;background-color:transparent;font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:500}.modal-mat-button.cancel{color:#242424;border-color:transparent;margin-right:5px}.modal-mat-button.cancel:hover{background-color:#e0e0e0;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-button:hover{background-color:#2c4cff1f;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-button-delete{padding:6px;width:85px;border-radius:3px;border:solid;color:#e64242;border-width:1.75px;box-shadow:transparent;background-color:transparent;margin-top:25px;margin-right:-10px;font-family:Roboto,Helvetica Neue,sans-serif;font-size:14px;font-weight:500}.modal-mat-button-delete.cancel{border-color:transparent;color:#242424;margin-top:25px;margin-right:5px}.modal-mat-button-delete.cancel:hover{background-color:#e0e0e0;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-button-delete:hover{background-color:#fff0f0;-webkit-transition-duration:.2s;transition-duration:.2s}.modal-mat-header{margin-left:1rem;-webkit-user-select:text;user-select:text}.modal-icon{font-size:24px;position:absolute;margin-top:4px;margin-left:3px}.modal-content-body{margin-left:45px;margin-bottom:-5px;margin-top:1px;font-size:17px;min-width:400px}.modal-clear-button{border-radius:100%;background-color:transparent;border-color:transparent}.modal-clear-button:hover{background-color:#0000001f!important;transition:0!important;-webkit-transition-duration:0!important;transition-duration:0!important}.padding-1{padding:1rem}.d-flex{display:flex}.flex-align-items-start{align-items:flex-start}.modal-icon-container{display:flex;flex-direction:column;justify-content:center}.mat-mdc-button:not(:disabled){color:none}.mat-mdc-form-field-focus-overlay,.mdc-text-field--focused{background-color:#fff!important}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1.MatDialogRef }, { type: i2.HttpClient }, { type: i3.MatSnackBar }] });
//# sourceMappingURL=data:application/json;base64,